#include<iostream>
#include<list>
using namespace std;
class graph
{
  int v;
  list<int>*adj;
  public:
  graph(int n)
  {
    this->v=n;
    adj=new list<int>[v];
  }
  void add(int x,int y)
  {
    adj[x].push_back(y);
  }
  bool reach(int a,int b)
  {
    if(a==b)
    return true;
    bool *visited=new bool[v];
    for(int i=0;i<v;i++)
    visited[i]=false;
    list<int>queue;
    list<int>::iterator i;
    visited[a]=true;
    queue.push_back(a);
    while(!queue.empty())
    {
      a=queue.front();
      queue.pop_front();
       for(i=adj[a].begin();i!=adj[a].end();++i)
       {
         if(*i==b)
         return true;
         if(!visited[*i])
         {
          visited[*i]=true;
          queue.push_back(*i);
         }
       }
    }
    return false;
  }
};
int main()
{
  graph g(4);
  g.add(1,2);
  g.add(1,3);
  g.add(1,4);
  g.add(2,3);
  g.add(2,4);
  g.add(4,3);
  int v;
  cout<<"enter node u want to find\n";
  cin>>v;
  int w=4;
  if(g.reach(w,v))
  cout<<"path found\n";
  else
  cout<<"no path\n";
}
